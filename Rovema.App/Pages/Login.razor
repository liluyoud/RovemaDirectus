@page "/login"
@layout CleanLayout
@inject DirectusAuthStateProvider Auth
@inject NavigationManager Navigation

<PageTitle>Entrar</PageTitle>

<MudPaper Class="d-flex" Height="100vh">
    <MudPaper Class="d-flex flex-column rounded-0 pa-12" Elevation="0" Width="500px">
        <MudPaper Class="pb-16 d-flex flex-row" Width="100%" Height="84px" Elevation="5">
            <MudPaper Class="pa-2" Width="80px" Height="80px" Elevation="0">
                <MudImage Src="images/icon512.png" Alt="Rovema Logo" Elevation="0" Class="rounded-lg" ObjectFit="ObjectFit.Fill" Fluid/>
            </MudPaper>
            <MudPaper Class="flex-grow-1 pa-3" Height="80px" Elevation="0">
                <MudText Typo="Typo.h6"> Rovema PME</MudText>
                <MudText Typo="Typo.body1" Color="Color.Success"> Dashboard de Monitoramento</MudText>
            </MudPaper>
        </MudPaper>
        <MudText Typo="Typo.h3" Class="pt-16 mb-2">Credenciais</MudText>
        <MudForm @ref="form" Model="@loginModel">
            <MudTextField @bind-Value="loginModel.Email" Label="Email" Required="true" Variant="Variant.Outlined" Class="my-4" />
            <MudTextField @bind-Value="loginModel.Password" Label="Senha" InputType="InputType.Password" Required="true" Variant="Variant.Outlined" Class="my-4" />
            <MudButton @ref="login" Variant="Variant.Filled" Size="Size.Large" Color="Color.Success" OnClick="DoLogin" Class="my-4"
                       Style="width: 200px; height: 60px;">Entrar
            </MudButton>
        </MudForm>
    </MudPaper>
    <MudPaper Class="flex-grow-1 rounded-0 d-none d-sm-block" Style="background: url('/images/back2.jpg') center center / cover">
    </MudPaper>
</MudPaper>

@code {
    private MudForm? form;
    private LoginModel loginModel = new();
    private MudButton? login;

    private async Task DoLogin()
    {
        if (form != null )
        {
            if (!string.IsNullOrEmpty(loginModel.Email) && !string.IsNullOrEmpty(loginModel.Password))
            {
                login.Disabled = true;
                var auth = await Auth.LoginAsync(loginModel.Email, loginModel.Password);
                if (auth) 
                    Navigation.NavigateTo("/");
                login.Disabled = false;
            }
        }
    }

    public class LoginModel
    {
        public string? Email { get; set; }
        public string? Password { get; set; }
    }
}
