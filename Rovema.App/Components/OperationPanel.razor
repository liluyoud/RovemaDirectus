@inject DirectusService directus

<MudCard>
    <MudCardHeader>
        <CardHeaderAvatar>
            <MudIcon Color="@color" Icon="@avatar" Size="Size.Large" />
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText Typo="Typo.body1">@name</MudText>
            <span style="color: var(--mud-palette-info);">@value</span>
        </CardHeaderContent>
        <CardHeaderActions>
            <small>@updated</small>
        </CardHeaderActions>
    </MudCardHeader>
</MudCard>


@code {
    [Parameter, EditorRequired]
    public required RpaModel Rpa { get; set; }

    private Color color = Color.Error;
    private string? avatar;
    private string? name;
    private string? value;
    private string? updated;
    private string? cache;

    protected override async Task OnParametersSetAsync()
    {
        if (Rpa.Type == "Ion")
        {
            avatar = Icons.Material.Filled.AutoMode;
            name = Rpa.Name.Replace(" Ion", "");
        }
        else if (Rpa.Type == "Inversor")
        {
            avatar = @Icons.Material.Outlined.EnergySavingsLeaf;
            name = Rpa?.Name.Replace(" Inversor", "");
        }
        else if (Rpa.Type == "Solar")
        {
            avatar = @Icons.Material.Outlined.WbSunny;
            name = Rpa.Name.Replace(" Solar", "");
        }
        else if (Rpa.Type == "Clima")
        {
            avatar = @Icons.Material.Outlined.Cloud;
            name = Rpa.Name.Replace(" Clima", "");
        }
        await UpdateData();
    }

    void UpdatePanel(double? value, DateTime? updated, string format, string pos)
    {
        if (value != null && updated != null)
        {
            this.value = value.Value.ToString(format) + " " + pos;
            this.updated = updated.Value.ToString("HH:mm");
            var diff = DateTime.Now - updated;
            if (diff.Value.TotalMinutes > Rpa.Timeout)
            {
                color = Color.Error;
                if (DateTime.Now.Date != updated.Value.Date)
                {
                    this.updated = updated.Value.ToString("dd/MM");
                }
            }
            else
            {
                color = Color.Success;
            }
        }
        else
        {
            color = Color.Error;
        }
        StateHasChanged();
    }

    async Task UpdateData()
    {
        cache = await directus.GetCache(Rpa.Id);

        if (Rpa.Type == "Ion")
        {
            var cache = await directus.GetCache<ReadIonModel>(Rpa.Id);
            UpdatePanel(cache?.Power_KW_Total, cache?.ReadAt, "N2", "kW");
        }
        else if (Rpa.Type == "Inversor")
        {
            var cache = await directus.GetCache<ReadInverterModel>(Rpa.Id);
            UpdatePanel(cache?.Current, cache?.ReadAt, "N2", "kW");
        }
        else if (Rpa.Type == "Solar")
        {
            var cache = await directus.GetCache<ReadSolarModel>(Rpa.Id);
            UpdatePanel(cache?.Power1, cache?.ReadAt, "N2", "kW");
        }
        else if (Rpa.Type == "Clima")
        {
            var cache = await directus.GetCache<ReadWeatherModel>(Rpa.Id);
            UpdatePanel(cache?.TempC, cache?.ReadAt, "N1", "ºC");
        }
        await Task.Delay(Rpa.Refresh * 60000);
        await UpdateData();
    }
}
